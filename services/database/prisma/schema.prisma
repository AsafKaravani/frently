// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("FRENTLY_DATABASE_URL")
}

model Profile {
  // Fields
  auth String @unique
  name String

  // Relations
  roles      RolesOfProfile[]
  businesses BusinessWorker[]

  // Auto Generated
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  // Fields
  title String

  // Relations
  RolesOfProfile RolesOfProfile[]

  // Auto Generated
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolesOfProfile {
  // Relations
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?
  Role      Role?    @relation(fields: [roleId], references: [id])
  roleId    Int?

  // Auto Generated
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  // Fields
  name        String
  stateId     Int
  stateCode   String
  countryId   Int
  countryCode String
  latitude    Decimal
  longitude   Decimal
  flag        Int
  wikiDataId  String

  // Relations
  Business Business[]

  // Auto Generated
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Business {
  // Fields
  name  String
  email String?
  phone String

  // Relations
  city               City                 @relation(fields: [cityId], references: [id])
  cityId             Int
  workers            BusinessWorker[]
  BusinessCategories BusinessCategory[]
  CategoryFieldValue CategoryFieldValue[]

  // Auto Generated
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessCategory {
  // Relations
  Business   Business? @relation(fields: [businessId], references: [id])
  businessId Int?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  // Auto Generated
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
}

model BusinessWorker {
  // Fields
  duty Duty

  // Relations
  Profile    Profile?  @relation(fields: [profileId], references: [id])
  profileId  Int?
  Business   Business? @relation(fields: [businessId], references: [id])
  businessId Int?

  // Auto Generated
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

enum Duty {
  OWNER
  MANAGER
  WORKER
}

model Category {
  // Fields
  name String

  // Relations
  fields             CategoryField[]
  BusinessCategories BusinessCategory[]

  // Auto Generated
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoryField {
  // Fields
  type     FieldType
  required Boolean
  options  String[]

  // Relations
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  CategoryFieldValue CategoryFieldValue[]
  // Auto Generated
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

enum FieldType {
  TEXT
  NUMBER
  SELECT
}

model CategoryFieldValue {
  // Fields
  value String

  // Relations
  CategoryField   CategoryField @relation(fields: [categoryFieldId], references: [id])
  categoryFieldId Int
  Business        Business      @relation(fields: [businessId], references: [id])
  businessId      Int

  // Auto Generated
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
